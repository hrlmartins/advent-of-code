/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package src

fun main() {
    val input = generateSequence(::readLine).toList()
    solveP1(input)
    solveP2(input)
}

fun solveP1(lines: List<String>) {
    val pattern = """(-?\d+)""".toRegex()
    val sensorHist = lines.map { line -> pattern.findAll(line).map { it.value.toLong() }.toList() }

    sensorHist.sumOf { lineHist ->
        val stepHistory = mutableListOf<List<Long>>()
        stepHistory.add(lineHist)
        var tempHist = lineHist.toList()
        do {
            tempHist = tempHist.windowed(2, 1).map { (first, second) -> second - first }
            stepHistory.add(tempHist)
        } while (!tempHist.all { it == 0L })

        stepHistory.reversed().sumOf { it.last() }
    }.also { println("P1: $it") }
}

fun solveP2(lines: List<String>) {
    val pattern = """(-?\d+)""".toRegex()
    val sensorHist = lines.map { line -> pattern.findAll(line).map { it.value.toLong() }.toList() }

    sensorHist.sumOf { lineHist ->
        val stepHistory = mutableListOf<List<Long>>()
        stepHistory.add(lineHist.reversed())
        var tempHist = lineHist.toList().reversed()
        do {
            tempHist = tempHist.windowed(2, 1).map { (first, second) -> second - first }
            stepHistory.add(tempHist)
        } while (!tempHist.all { it == 0L })

        stepHistory.reversed().sumOf { it.last() }
    }.also { println("P2: $it") }
}
