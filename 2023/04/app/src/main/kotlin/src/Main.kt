/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package src

fun main() {
    val input = generateSequence(::readLine).toList()
    solveP1(input)
    solveP2(input)
}

fun solveP1(lines: List<String>) {
    lines.sumOf { line ->
        val game = computeGame(line)
        val matchedNumbers = game.chosen.intersect(game.extracted)

        if (matchedNumbers.size > 0) {
            (1 until matchedNumbers.size).fold(1L) { acc, _ -> acc * 2L }
        } else {
            0L
        }
    }.also { println("There are $it points worth in total") }
}


fun solveP2(lines: List<String>) {
    val mapCardResultsCopies = lines.foldIndexed(mutableMapOf<Int, State>()) { idx, acc, line ->
        val game = computeGame(line)
        val matchedNumbers = game.chosen.intersect(game.extracted.toSet())
        acc[idx+1] = State(1, matchedNumbers.size)
        acc
    }

    lines.forEachIndexed { idx, _ ->
        val cardId = idx + 1
        val cardResults = mapCardResultsCopies[cardId]
        (0 until cardResults!!.copies).forEach {
            (cardId + 1..cardId + cardResults.matchedNumbers).forEach {
                val oldState = mapCardResultsCopies[it]!!
                mapCardResultsCopies[it] = oldState.copy(
                        copies = oldState.copies + 1L,
                        matchedNumbers = oldState.matchedNumbers
                )
            }
        }
    }

    mapCardResultsCopies.values.sumOf { it.copies }.also {
        println("The final number os scratchies is $it")
    }
}

data class Game(val chosen: List<Int>, val extracted: List<Int>)
data class State(val copies: Long, val matchedNumbers: Int)

private fun computeGame(line: String): Game {
    val numberPattern = """(\d+)""".toRegex()
    val lottery = line.split(":")[1]
    val numbersExtractedWon = lottery.split("|") // only matters the second part

    val numbersChosen = numberPattern.findAll(numbersExtractedWon[0]).map { it.value.toInt() }.sorted().toList()
    val numbersWon = numberPattern.findAll(numbersExtractedWon[1]).map { it.value.toInt() }.sorted().toList()

    return Game(numbersChosen, numbersWon)
}
