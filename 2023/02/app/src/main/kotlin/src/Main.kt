/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package src

fun main() {
    val input = generateSequence(::readLine).toList()
    solveP1(input)
    solveP2(input)
}

fun solveP1(lines: List<String>) {
    // Games possible with the predifined loaded cubes
    // 12 red cubes, 13 green cubes, 14 blue cubes
    val bag = mapOf("red" to 12, "green" to 13, "blue" to 14)

    lines.sumOf { line ->
        val matchGameId = """Game (\d+)""".toRegex()
        val game = matchGameId.find(line.split(":").first())!!
        val (gameId) = game.destructured
        val draws = gameDraws(line.split(":").last())

        draws.forEach { drawMap ->
            drawMap.entries.forEach { entry ->
                if (entry.value > bag[entry.key]!!) {
                    return@sumOf 0
                }
            }
        }

        gameId.toInt()
    }.also { println("Sum of invalid games: $it") }
}

fun solveP2(lines: List<String>) {
    lines.sumOf { line ->
        val draws = gameDraws(line.split(":").last())
        val init = mutableMapOf("red" to 0L, "blue" to 0L, "green" to 0L)

        draws.fold(init) { acc, drawMap ->
            drawMap.entries.forEach { entry ->
                if (entry.value > acc[entry.key]!!) {
                    acc[entry.key] = entry.value.toLong()
                }
            }

            acc
        }.values.reduce { acc, value -> acc * value }
    }.also { println("Sum of power games: $it") }
}


private fun gameDraws(line: String): List<Map<String, Int>> {
    val cubesDrawn = line.split(";")
    val matchRounds = """(\d+) (\w+)""".toRegex()

    return cubesDrawn.map { draw ->
        val matches = matchRounds.findAll(draw)
        matches.fold(mutableMapOf<String, Int>()) { acc, matchResult ->
            val (cubeCount, cubeColor) = matchResult.destructured
            acc.put(cubeColor, cubeCount.toInt())
            acc
        }
    }
}