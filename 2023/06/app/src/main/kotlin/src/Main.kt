/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package src

fun main() {
    val input = generateSequence(::readLine).toList()
    solveP1(input)
    solveP2(input)
}

fun solveP1(lines: List<String>) {
    val numberPattern = """(\d+)""".toRegex()
    val raceTimes = numberPattern.findAll(lines.first()).map { it.value.toLong() }.toList()
    val recordDistance = numberPattern.findAll(lines.last()).map { it.value.toLong() }.toList()

    raceTimes.zip(recordDistance).fold(1L) { acc, (raceTime, record) ->
        val breakRecord = (0L..raceTime).map { speed ->
            val travelTime = raceTime - speed
            speed * travelTime
        }.filter { it > record  }

        acc * breakRecord.size
    }.also { println("P1: $it") }
}

fun solveP2(lines: List<String>) {
    val numberPattern = """(\d+)""".toRegex()
    val raceTime = numberPattern.findAll(lines.first()).map { it.value.toLong() }.toList()
            .joinToString("").toLong()
    val recordDistance = numberPattern.findAll(lines.last()).map { it.value.toLong() }.toList()
            .joinToString("").toLong()

    (0L..raceTime).map { speed ->
        val travelTime = raceTime - speed
        speed * travelTime
    }.filter { it > recordDistance  }.also { println("P2: ${it.size}") }
}
