/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package src

enum class Direction {
    FORWARD,
    UP,
    DOWN
}

fun main() {
    val input = generateSequence(::readLine).toList()

    // p1
    val sub = Submarine()
    readInputAndFormat(input).forEach { sub.move(it) }
    println("The product of the position is: ${sub.depth * sub.horizontalPos}")

    // p2
    val sub2 = SubmarineWithAim()
    readInputAndFormat(input).forEach { sub2.move(it) }
    println("The product of the complex position is: ${sub2.depth * sub2.horizontalPos}")
}

data class Movement(val direction: Direction, val value: Int)

class Submarine(var horizontalPos: Int = 0, var depth: Int = 0) {
    fun move(movement: Movement) {
        when (movement.direction) {
            Direction.FORWARD -> horizontalPos += movement.value
            Direction.DOWN -> depth += movement.value
            Direction.UP -> depth -= movement.value
        }
    }
}

class SubmarineWithAim(var horizontalPos: Int = 0, var depth: Int = 0, var aim: Int = 0) {
    fun move(movement: Movement) {
        when (movement.direction) {
            Direction.FORWARD -> {
                horizontalPos += movement.value
                depth += movement.value * aim
            }
            Direction.DOWN -> aim += movement.value
            Direction.UP -> aim -= movement.value
        }
    }
}

fun readInputAndFormat(input: List<String>): List<Movement> {
    val pattern = """(\w+) (\d+)""".toRegex()
    return input.map {
        val (direction, value) = pattern.matchEntire(it)?.destructured!!
        Movement(Direction.valueOf(direction.uppercase()), value.toInt())
    }
}
